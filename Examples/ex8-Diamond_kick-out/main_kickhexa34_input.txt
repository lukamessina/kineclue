This input file describes a kick-out mechanism of an interstitial
occupying a hexagonal site A of the diamond lattice, hopping onto
a neighboring lattice site B and kicking the substitutional atom
which was occupying the lattice site B out onto a neighboring hexagonal site C
(cf R. Chen and S.T. Dunham, Phys. Rev. B 83, (2011) 134124 for a detailed description of the
jump mechanism). The final hexagonal site is chosen such as  the vector joining
the substitutional site to the initial site (vector BA) and the vector joining
the substitutional site to the final hexagonal site make a cosinus
equal to -5/11 (corresponding to the hexagonal sites named 3 and 4 in the
publication). 

Two species are considered: first, the defect seating on one of the hexagonal
interstitial sites and second, the solute atom seating on a diamond lattice site or with
the defect on an interstitial hexagonal site (leading to an occupation number equal to -1).

For an initial and final hexagonal site, an interstitial may jump on two different
substitutional sites. Our description of the jump mechanism explores the full set of
possibilities:
- First, in int_jump both, substitutional sites are occupied by an atom of the matrix.
- Second, in int_nojumpB, the interstitial jumps on one of the substitutional sites while the
 other one is occupied by the solute atom. This jump mechanism is doubled to get the right
 multiplicity.
- Third, in int_jumpB, the interstitial jumps on the substitutional site occupied by the
 solute atom and pushes the solute atom toward the final hexagonal site. This jump mechanism is doubled to get the right multiplicity.

& CRYSTAL Diamond
+0.0 +0.5 +0.5
+0.5 +0.0 +0.5
+0.5 +0.5 +0.0
& BASIS o 2
0 0.0 0.0 0.0
0 2/8 2/8 2/8
& KINETICRANGE 4.0 0.6
& CPG o 1 0 0
& UNIQUEPOS 2
o 0    0   0
o 3/8 5/8 3/8
& SPECIES 2
1   0   1  defect
1   1  -1  solute
& JUMPMECH
%% 3 int_jump
o 1 3/8 5/8 3/8 > 1 -1/8 1/8 3/8
o 0  2/8 2/8 2/8 > 0  2/8 2/8 2/8
o 0  0/8 4/8 4/8 > 0  0/8 4/8 4/8
%% 2 int_nojumpB
o 1 3/8 5/8 3/8 > 1 -1/8 1/8 3/8
o 2  2/8 2/8 2/8 > 2 2/8 2/8 2/8
%% 2 int_nojumpB
o 1 3/8 5/8 3/8 > 1 -1/8 1/8 3/8
o 2  2/8 2/8 2/8 > 2 2/8 2/8 2/8
%% 2 int_jumpB
o 1 3/8 5/8 3/8  > 1 -1/8 1/8 3/8
o 2 2/8 2/8 2/8  > 2 -1/8 1/8 3/8
%% 2 int_jumpB
o 1 3/8 5/8 3/8  > 1 -1/8 1/8 3/8
o 2 2/8 2/8 2/8  > 2 -1/8 1/8 3/8
& PRINTXYZ o # (optional) print each configuration and jump frequency coordinates
& PRINTSYMEQS o # (optional) print jump and defects symmetry equivalents
& RUNNUM num_kickhexa34_input.txt # (optional) automatically run the numerical part of KineCluE without pausing
& INICONF 2 # (optional) define initial configuration (final result should not depend on the initial configuration)
o 1 3/8 5/8 3/8
o 2 0/8 4/8 4/8
